cff-version: 1.2.0
title: Warblre
message: >-
  If you use this software, please cite it using the
  metadata from this file.
type: software
authors:
  - given-names: Noé
    family-names: De Santo
    email: noe@ef5.ch
    affiliation: EPFL
    orcid: 'https://orcid.org/0009-0006-5119-3895'
  - given-names: Aurèle
    family-names: Barrière
    affiliation: EPFL
    email: aurele.barriere@epfl.ch
    orcid: 'https://orcid.org/0000-0002-7297-2170'
  - email: clement.pit-claudel@epfl.ch
    given-names: Clément
    family-names: Pit-Claudel
    affiliation: EPFL
    orcid: 'https://orcid.org/0000-0002-1900-3901'
repository-code: 'https://github.com/epfl-systemf/Warblre'
license: BSD-3-Clause
preferred-citation:
  type: article
  authors:
    - given-names: Noé
      family-names: De Santo
      email: noe@ef5.ch
      affiliation: EPFL
      orcid: 'https://orcid.org/0009-0006-5119-3895'
    - given-names: Aurèle
      family-names: Barrière
      affiliation: EPFL
      email: aurele.barriere@epfl.ch
      orcid: 'https://orcid.org/0000-0002-7297-2170'
    - email: clement.pit-claudel@epfl.ch
      given-names: Clément
      family-names: Pit-Claudel
      affiliation: EPFL
      orcid: 'https://orcid.org/0000-0002-1900-3901'
  doi: 10.1145/3674666
  title: A Coq Mechanization of JavaScript Regular Expression Semantics
  abstract: >-
    We present an executable, proven-safe, faithful, and future-proof Coq mechanization of JavaScript regular expression (regex) matching, as specified by the last published edition of ECMA-262 section 22.2. This is, to our knowledge, the first time that an industrial-strength regex language has been faithfully mechanized in an interactive theorem prover. We highlight interesting challenges that arose in the process (including issues of encoding, corner cases, and executability), and we document the steps that we took to ensure that the result is straightforwardly auditable and that our understanding of the spec aligns with existing implementations.
    We demonstrate the usability and versatility of the mechanization through a broad collection of analyses, case studies, and experiments: we prove that JavaScript regex matching always terminates and is safe (no assertion failures); we identify subtle corner cases that led to mistakes in previous publications; we verify an optimization extracted from a state-of-the-art regex engine; we show that some classic properties described in automata textbooks and used in derivatives-based matchers do not hold in JavaScript regexes; and we demonstrate that the cost of updating the mechanization to account for changes in the original specification is reasonably low.
    Our mechanization can be extracted to OCaml and linked with Unicode libraries to produce an executable engine that passes the relevant parts of the official Test262 conformance test suite.
  pages: 30
  month: 9
  year: 2024
  conference:
    name: International Conference on Functional Programming
    alias: ICFP
    date-start: 2024-09-02
    date-end: 2024-09-07
    location: Milan. Italy.
  publisher:
    name: Association for Computing Machinery
    alias: ACM
    address: New York, NY, USA

